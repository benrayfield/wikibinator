/** Ben F Rayfield offers this software opensource MIT license */
package wikibinatorV0.datastructsBeforeCompileThemAllToAxiomforest.nodes;
import wikibinatorV0.datastructsBeforeCompileThemAllToAxiomforest.Node;

/** This system cant prove its own correctness, but if an axiom generates an axiom that generates an axiom
that generates an axiom ... many levels deep, it is still possible to trace it back to the set of
axiomforest nodes which led to this node, the same as if they were not generated axioms
but just data generated by a single axiom, since code is data,
and if no MutuallyAssuredDestruction (blockchain-fork or bits of logic forking in 1 computer)
happens while being extremely redundantly cross-referenced by turing-complete-challenge-response,
then we can gain confidence over time that some set of axioms (that generate axioms that generate axioms)
never generate anything that contradicts anything else (TruthValue.bull).
<br><br>
This system does not provide a way to generate the first GeneratedAxioms
but does provide a way for various people andOr computers to experiment with combos of them
and see if contradictions are found, and choose to continue that in various combos.
The way you do that is add an axiom where Yes implies a specific GeneratedAxiom,
which might (TODO choose a design) fit in a Rfpd or something similar to a Rfpd
which is the same way Rfpds in the wiki are added since wiki (1 of the wikibinator opcodes)
is the only nondeterminism in the system (except maybe statements in the axiomforest that cant be proven or disproven?).
I'll create a Node type for that right now, which is called Believe.
<br><br>
datastructWrappingAHaltedLambdaInThe(Axiomnode.v)Child)ThatsClaimedToBeAValidAxiomBased
OnTheVShapeAndStepFuncCreatesWhatever<bit,v,l,r>ItSaysToWithoutVerifyingIt
*/
public class GeneratedAxiom extends AbstractNode{
	
	public GeneratedAxiom(HaltedLambda callThisOnA_ViewNodeAsHaltedLambda){
		super(callThisOnA_ViewNodeAsHaltedLambda);
	}
	
	public HaltedLambda callThisOnA_ViewNodeAsHaltedLambda(){
		return (HaltedLambda)get(0);
	}

}
